buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.5.0'
}

apply from: "properties.gradle"

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

apply plugin: 'maven-publish'

// === CHANGE BELOW HERE === //

version = modVersion
group = modGroup
archivesBaseName = modBaseName
ext.versionTag = ''

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

license {
    header = project.file('LICENSE-HEADER')
    include '**/*.java'
}

minecraft {
    mappings channel: 'snapshot', version: mappingsVersion
}

dependencies {
    minecraft "net.minecraftforge:forge:${forgeVersion}"
}

if (file('private.gradle').exists()) {
    apply from: 'private.gradle'
}

// Borrowed from concrete
// (https://github.com/elytra/concrete)

task buildAll(type: Jar) {
    baseName = 'compound-all'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/**'
    }
}

task buildCore(type: Jar) {
    baseName = 'compound-core'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/core/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/core/**'
    }
}

task buildInventory(type: Jar) {
    baseName = 'compound-inventory'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/inventory/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/inventory/**'
    }
}

task buildNetwork(type: Jar) {
    baseName = 'compound-network'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/network/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/network/**'
    }
}

task buildConfig(type: Jar) {
    baseName = 'compound-config'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/config/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/config/**'
    }
}

task buildUi(type: Jar) {
    baseName = 'compound-ui'
    from(sourceSets.main.allSource) {
        include 'com/tridevmc/compound/ui/**'
    }
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/ui/**'
    }
}

artifacts {
    archives buildAll, buildCore, buildInventory, buildNetwork, buildConfig, buildUi
}

publishing {
    publications {
        all(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-all'
            version project.version + versionTag
            artifact buildAll
        }
        core(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-core'
            version project.version + versionTag
            artifact buildCore
        }
        inventory(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-inventory'
            version project.version + versionTag
            artifact buildInventory
        }
        network(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-network'
            version project.version + versionTag
            artifact buildNetwork
        }
        config(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-config'
            version project.version + versionTag
            artifact buildConfig
        }
        ui(MavenPublication) {
            groupId 'com.tridevmc.compound'
            artifactId 'compound-ui'
            version project.version + versionTag
            artifact buildUi
        }
    }
}
