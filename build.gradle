buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

//plugins {
//    id 'net.minecrell.licenser' version '0.3'
//}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

// === CHANGE BELOW HERE === //

version = "0.0.1"
group = "com.tridevmc"
archivesBaseName = "Compound"
ext.versionTag = ''

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

//license { TODO: Re-enable this, just disabling to test ci.
//    header = project.file('HEADER')
//}

minecraft {
    version = "1.12.2-14.23.3.2673"
    runDir = "run"

    mappings = "snapshot_20180424"
    makeObfSourceJar = false
}

dependencies {


}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version


    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

if (file('private.gradle').exists()) {
    apply from: 'private.gradle'
}

// Borrowed from concrete
// (https://github.com/elytra/concrete)

task buildAll(type: Jar) {
    baseName = 'compound-all'
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/**'
    }
}

task buildCore(type: Jar) {
    baseName = 'compound-core'
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/core/**'
    }
}

task buildGui(type: Jar) {
    baseName = 'compound-gui'
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/gui/**'
    }
}

task buildInventory(type: Jar) {
    baseName = 'compound-inventory'
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/inventory/**'
    }
}

task buildNetwork(type: Jar) {
    baseName = 'compound-network'
    from(sourceSets.main.output) {
        include 'com/tridevmc/compound/network/**'
    }
}

reobf {
    buildCore { mappingType = 'SEARGE' }
    buildGui { mappingType = 'SEARGE' }
    buildInventory { mappingType = 'SEARGE' }
}

artifacts {
    archives buildAll, buildCore, buildGui, buildInventory, buildNetwork
}

print(versionTag)

publishing {
	publications {
		all(MavenPublication) {
			groupId 'com.tridevmc.compound'
			artifactId 'compound-all'
			version project.version + versionTag
			artifact buildAll
		}
		core(MavenPublication) {
			groupId 'com.tridevmc.compound'
			artifactId 'compound-core'
			version project.version + versionTag
			artifact buildCore
		}
		block(MavenPublication) {
			groupId 'com.tridevmc.compound'
			artifactId 'compound-gui'
			version project.version + versionTag
			artifact buildGui
		}
		inventory(MavenPublication) {
			groupId 'com.tridevmc.compound'
			artifactId 'compound-inventory'
			version project.version + versionTag
			artifact buildInventory
		}
		recipe(MavenPublication) {
			groupId 'com.tridevmc.compound'
			artifactId 'compound-network'
			version project.version + versionTag
			artifact buildNetwork
		}
	}
}
